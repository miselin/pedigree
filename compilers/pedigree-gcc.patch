From 9e12b96ca0283041b29e310a867d880a95b928b9 Mon Sep 17 00:00:00 2001
From: Matthew Iselin <matthew@theiselins.net>
Date: Tue, 7 Mar 2017 11:32:09 -0800
Subject: [PATCH] Add arm-pedigree and x86_64-pedigree targets to GCC.

---
 config.sub                                    |  3 ++
 configure.ac                                  |  4 +-
 gcc/Makefile.in                               |  1 +
 gcc/config.gcc                                | 19 +++++++-
 gcc/config/pedigree.h                         | 44 +++++++++++++++++++
 gcc/config/t-pedigree                         |  6 +++
 libgcc/config.host                            | 17 ++++++-
 libstdc++-v3/config/os/gnu-linux/os_defines.h |  7 ---
 libstdc++-v3/configure.host                   |  4 ++
 libstdc++-v3/crossconfig.m4                   |  4 ++
 libtool.m4                                    |  4 +-
 11 files changed, 99 insertions(+), 14 deletions(-)
 create mode 100644 gcc/config/pedigree.h
 create mode 100644 gcc/config/t-pedigree

diff --git a/config.sub b/config.sub
index f2632cd8a2b..6468ec9a6e8 100755
--- a/config.sub
+++ b/config.sub
@@ -1563,6 +1563,9 @@ case $os in
 		;;
 	-ios)
 		;;
+	-pedigree*)
+		os=-pedigree
+		;;
 	-none)
 		;;
 	*)
diff --git a/configure.ac b/configure.ac
index c3433336523..46e9f466144 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1700,7 +1700,7 @@ ACX_ELF_TARGET_IFELSE([# ELF platforms build the lto-plugin always.
   build_lto_plugin=yes
 ],[if test x"$default_enable_lto" = x"yes" ; then
     case $target in
-      *-apple-darwin[[912]]* | *-cygwin* | *-mingw* | *djgpp*) ;;
+      *-apple-darwin[[912]]* | *-cygwin* | *-mingw* | *djgpp* | *pedigree*) ;;
       # On other non-ELF platforms, LTO has yet to be validated.
       *) enable_lto=no ;;
     esac
@@ -1711,7 +1711,7 @@ ACX_ELF_TARGET_IFELSE([# ELF platforms build the lto-plugin always.
   # warn during gcc/ subconfigure; unless you're bootstrapping with
   # -flto it won't be needed until after installation anyway.
     case $target in
-      *-cygwin* | *-mingw* | *-apple-darwin* | *djgpp*) ;;
+      *-cygwin* | *-mingw* | *-apple-darwin* | *djgpp* | *pedigree*) ;;
       *) if test x"$enable_lto" = x"yes"; then
 	AC_MSG_ERROR([LTO support is not enabled for this target.])
         fi
diff --git a/gcc/Makefile.in b/gcc/Makefile.in
index 20bee0494b1..363f5b91903 100644
--- a/gcc/Makefile.in
+++ b/gcc/Makefile.in
@@ -232,6 +232,7 @@ CPPFLAGS = @CPPFLAGS@
 AWK = @AWK@
 CC = @CC@
 CXX = @CXX@
+CPP = @CPP@
 BISON = @BISON@
 BISONFLAGS =
 FLEX = @FLEX@
diff --git a/gcc/config.gcc b/gcc/config.gcc
index 7af8e028104..4f8543975c8 100644
--- a/gcc/config.gcc
+++ b/gcc/config.gcc
@@ -930,6 +930,9 @@ case ${target} in
       ;;
   esac
   ;;
+*-*-pedigree*)
+  use_gcc_stdint=provide
+  ;;
 *-*-elf|arc*-*-elf*)
   # Assume that newlib is being used and so __cxa_atexit is provided.
   default_use_cxa_atexit=yes
@@ -1172,7 +1175,7 @@ arm*-*-phoenix*)
 	tmake_file="${tmake_file} arm/t-arm arm/t-bpabi arm/t-phoenix"
 	target_cpu_cname="arm7tdmi"
 	;;
-arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)
+arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia* | arm*-*-pedigree*)
 	case ${target} in
 	arm*eb-*-eabi*)
 	  tm_defines="${tm_defines} TARGET_BIG_ENDIAN_DEFAULT=1"
@@ -1182,10 +1185,17 @@ arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-fuchsia*)
 	tmake_file="${tmake_file} arm/t-arm arm/t-arm-elf"
 	target_cpu_cname="arm7tdmi"
 	case ${target} in
-	arm*-*-eabi*)
+	arm*-*-eabi* | arm*-*-pedigree*)
 	  tm_file="$tm_file newlib-stdint.h"
 	  tmake_file="${tmake_file} arm/t-bpabi"
 	  use_gcc_stdint=wrap
+	  case ${target} in
+	  arm*-*-pedigree*)
+	    tm_file="$tm_file pedigree.h"
+	    tmake_file="${tmake_file} t-pedigree"
+	    use_gcc_stdint=provide
+	    ;;
+	  esac
 	  ;;
 	arm*-*-fuchsia*)
 	  tm_file="${tm_file} fuchsia.h arm/fuchsia-elf.h glibc-stdint.h"
@@ -1641,6 +1651,11 @@ x86_64-*-linux* | x86_64-*-kfreebsd*-gnu)
 	done
 	TM_MULTILIB_CONFIG=`echo $TM_MULTILIB_CONFIG | sed 's/^,//'`
 	;;
+x86_64-*-pedigree*)
+	tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h i386/x86-64.h pedigree.h newlib-stdint.h"
+	tmake_file="i386/t-i386elf i386/t-crtstuff t-pedigree"
+	use_fixproto=yes
+	;;
 i[34567]86-pc-msdosdjgpp*)
 	xm_file=i386/xm-djgpp.h
 	tm_file="dbxcoff.h ${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/djgpp.h i386/djgpp-stdint.h"
diff --git a/gcc/config/pedigree.h b/gcc/config/pedigree.h
new file mode 100644
index 00000000000..0f7d451114d
--- /dev/null
+++ b/gcc/config/pedigree.h
@@ -0,0 +1,44 @@
+#define NO_IMPLICIT_EXTERN_C
+
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC \
+    "%{!shared:%{pie:S}crt1.o%s} crti.o%s %{shared|pie:crtbeginS.o%s;:crtbegin.o%s}"
+
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC \
+    "%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s"
+
+#undef CPLUSPLUS_CPP_SPEC
+#define CPLUSPLUS_CPP_SPEC "-D_GNU_SOURCE %(cpp)"
+
+#undef LIB_SPEC
+#define LIB_SPEC \
+    "%{pthread:-lpthread} \
+    -lc"
+
+#undef TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()                \
+    do {                                        \
+        builtin_define_std ("__pedigree__");    \
+        builtin_define_std ("__PEDIGREE__");    \
+        builtin_define_std ("unix");            \
+        builtin_assert ("system=pedigree");     \
+        builtin_assert ("system=unix");         \
+    } while(0);
+
+#if defined(HAVE_LD_EH_FRAME_HDR)
+#define LINK_EH_SPEC "%{!static:--eh-frame-hdr} "
+#endif
+
+#undef LINK_SPEC
+#define LINK_SPEC \
+                   "%{m32:-mpedigree_i386} \
+                    %{shared:-shared} \
+                    %{static:-static} \
+                    %{rdynamic:-export-dynamic} \
+                    -dynamic-linker /libraries/ld-musl-x86_64.so.1"
+
+/* Override size_t type for Pedigree, as Pedigree uses 'unsigned long' for all
+   targets. */
+#undef SIZE_TYPE
+#define SIZE_TYPE "long unsigned int"
diff --git a/gcc/config/t-pedigree b/gcc/config/t-pedigree
new file mode 100644
index 00000000000..29165bda66b
--- /dev/null
+++ b/gcc/config/t-pedigree
@@ -0,0 +1,6 @@
+EXTRA_MULTILIB_PARTS= crtbegin.o crtend.o crtbeginS.o crtendS.o
+
+# always build crtstuff with PIC.
+CRTSTUFF_T_CFLAGS_S = $(CRTSTUFF_T_CFLAGS) -fPIC
+
+TARGET_LIBGCC2_CFLAGS = -fPIC
diff --git a/libgcc/config.host b/libgcc/config.host
index 11b4acaff55..ad4ce8b3344 100644
--- a/libgcc/config.host
+++ b/libgcc/config.host
@@ -260,6 +260,10 @@ case ${host} in
       ;;
   esac
   ;;
+*-*-pedigree*)
+  tmake_file="$tmake_file $cpu_type/t-crtstuff t-crtstuff-pic t-libgcc-pic"
+  extra_parts="crtbegin.o crtend.o crtbeginS.o crtendS.o"
+  ;;
 *-*-rtems*)
   tmake_file="$tmake_file t-rtems"
   extra_parts="crtbegin.o crtend.o"
@@ -444,13 +448,19 @@ arm*-*-phoenix*)
 	extra_parts="crtbegin.o crtend.o crti.o crtn.o"
 	unwind_header=config/arm/unwind-arm.h
 	;;
-arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems*)
+arm*-*-eabi* | arm*-*-symbianelf* | arm*-*-rtems* | arm*-*-pedigree*)
 	tmake_file="${tmake_file} arm/t-arm arm/t-elf t-fixedpoint-gnu-prefix"
 	tm_file="$tm_file arm/bpabi-lib.h"
 	case ${host} in
-	arm*-*-eabi* | arm*-*-rtems*)
+	arm*-*-eabi* | arm*-*-rtems* | arm*-*-pedigree*)
 	  tmake_file="${tmake_file} arm/t-bpabi t-crtfm"
 	  extra_parts="crtbegin.o crtend.o crti.o crtn.o"
+      case ${host} in
+      arm*-*-pedigree*)
+        # crti/crtn provided by musl
+        extra_parts="crtbegin.o crtend.o crtbeginS.o crtendS.o"
+        ;;
+      esac
 	  ;;
 	arm*-*-symbianelf*)
 	  tmake_file="${tmake_file} arm/t-symbian t-slibgcc-nolc-override"
@@ -623,6 +633,9 @@ x86_64-*-dragonfly*)
 	tmake_file="${tmake_file} i386/t-dragonfly i386/t-crtstuff"
 	md_unwind_header=i386/dragonfly-unwind.h
 	;;
+x86_64-*-pedigree*)
+	tmake_file="$tmake_file i386/t-crtstuff t-crtstuff-pic t-libgcc-pic"
+	;;
 i[34567]86-*-freebsd*)
 	tmake_file="${tmake_file} i386/t-freebsd i386/t-crtstuff"
 	md_unwind_header=i386/freebsd-unwind.h
diff --git a/libstdc++-v3/config/os/gnu-linux/os_defines.h b/libstdc++-v3/config/os/gnu-linux/os_defines.h
index 4cd81c0f7ec..4f7ba660174 100644
--- a/libstdc++-v3/config/os/gnu-linux/os_defines.h
+++ b/libstdc++-v3/config/os/gnu-linux/os_defines.h
@@ -38,13 +38,6 @@
 
 #include <features.h>
 
-// Provide a declaration for the possibly deprecated gets function, as
-// glibc 2.15 and later does not declare gets for ISO C11 when
-// __GNU_SOURCE is defined.
-#if __GLIBC_PREREQ(2,15) && defined(_GNU_SOURCE)
-# undef _GLIBCXX_HAVE_GETS
-#endif
-
 // Glibc 2.23 removed the obsolete isinf and isnan declarations. Check the
 // version dynamically in case it has changed since libstdc++ was configured.
 #define _GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC __GLIBC_PREREQ(2,23)
diff --git a/libstdc++-v3/configure.host b/libstdc++-v3/configure.host
index 155a3cdea1b..16663e844bc 100644
--- a/libstdc++-v3/configure.host
+++ b/libstdc++-v3/configure.host
@@ -295,6 +295,10 @@ case "${host_os}" in
   openbsd*)
     os_include_dir="os/bsd/openbsd"
     ;;
+  pedigree*)
+    # Uses musl
+    os_include_dir="os/generic"
+    ;;
   qnx6.[12]*)
     os_include_dir="os/qnx/qnx6.1"
     c_model=c
diff --git a/libstdc++-v3/crossconfig.m4 b/libstdc++-v3/crossconfig.m4
index cb6e3afff3d..8828c4a5754 100644
--- a/libstdc++-v3/crossconfig.m4
+++ b/libstdc++-v3/crossconfig.m4
@@ -219,6 +219,10 @@ case "${host}" in
     fi
     AC_CHECK_FUNCS(aligned_alloc posix_memalign memalign _aligned_malloc)
     ;;
+  *-pedigree*)
+    AC_CHECK_HEADERS([sys/types.h locale.h float.h])
+    GLIBCXX_CHECK_COMPLEX_MATH_SUPPORT
+    ;;
   *-qnx6.1* | *-qnx6.2*)
     SECTION_FLAGS='-ffunction-sections -fdata-sections'
     AC_SUBST(SECTION_FLAGS) 
diff --git a/libtool.m4 b/libtool.m4
index 24d13f34409..c35bfa03ceb 100644
--- a/libtool.m4
+++ b/libtool.m4
@@ -5377,7 +5377,9 @@ if test -n "$compiler"; then
   _LT_LINKER_SHLIBS($1)
   _LT_SYS_DYNAMIC_LINKER($1)
   _LT_LINKER_HARDCODE_LIBPATH($1)
-  LT_SYS_DLOPEN_SELF
+  if test "$cross_compiling" = no; then
+    LT_SYS_DLOPEN_SELF
+  fi
   _LT_CMD_STRIPLIB
 
   # Report which library types will actually be built
-- 
2.21.0.593.g511ec345e18-goog

